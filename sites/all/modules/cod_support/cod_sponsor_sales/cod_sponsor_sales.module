<?php
/**
 * @file
 * Code for the cod_sponsor_sales feature.
 */

include_once 'cod_sponsor_sales.features.inc';
/**
 * @file
 * cod_sponsor_sales.module
 *
 * Main entry for the cod_sponsor_sales feature.
 */

include_once 'includes/SponsorSales.inc';
include_once 'includes/SponsorSalesForm.inc';
include_once 'includes/CartAddSponsorshipForm.inc';
include_once 'includes/SponsorshipLevelVocabulary.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cod_sponsor_sales_form_sponsor_node_form_alter(&$form, &$form_state) {
  $sponsor_form = new SponsorSalesForm($form);

  $sponsor_form->processSponsorLevel();

  if ($sponsor_form->isReady()) {
    // Override the commerce_node_checkout form alteration.
    $sponsor_form->addDefaultSponsorshipItem();
  }

  $sponsor_form->addSponsorshipActionCallback();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the action taken when a sponsorship product is selected.  Instead of
 * adding the sponsorship product the user is either directed to a sponsor node
 * add page, or to a current unpublished Sponsor node belonging to the User.
 */
function cod_sponsor_sales_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  $cart_add_form = new CartAddSponsorshipForm($form, $form_state);
  if ($cart_add_form->isSponsorshipProduct()) {
    $cart_add_form->overrideDefaultSubmit();
  }
}

/**
 * Callback function for sponsorship add to cart submission.
 *
 * This function overrides the default add to cart behavior for sponsorship
 * products.
 */
function cod_sponsor_sales_add_to_cart_submit($form, &$form_state) {
  if ($form['#cart_add_form']->isSponsorshipProduct()) {
    $form['#cart_add_form']->goToSponsorNodeAdd();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cod_sponsor_sales_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state) {
  // Find sponsorhip item line_item_id.
  foreach ($form_state['line_items'] as &$item) {
    if (strpos($item->line_item_label, 'SPONSORSHIP') !== FALSE) {
      $line_item_id = $item->line_item_id;
      break;
    }
  }
  // Disable changing the quantity of the sponsorship via the cart form.
  foreach ($form['edit_quantity'] as &$item) {
    if (is_array($item) && $item['#line_item_id'] == $line_item_id) {
      $item['#type'] = 'value';
      $item['#value'] = 1;
      break;
    }
  }
}

/**
 * Implements hook_commerce_cart_product_add().
 */
function cod_sponsor_sales_commerce_cart_product_add($order, $product, $quantity, $line_item) {
  if (strpos($line_item->line_item_label, 'SPONSORSHIP') !== FALSE) {
    foreach ($order->commerce_line_items[LANGUAGE_NONE] as $item) {
      $check_item = commerce_line_item_load($item['line_item_id']);
      if ($check_item->line_item_id == $line_item->line_item_id) {
        $check_item->quantity = 1;
        $check_item->commerce_total = $check_item->commerce_unit_price;
        commerce_line_item_save($check_item);
        break;
      }
      elseif (strpos($check_item->line_item_label, 'SPONSORSHIP') !== FALSE) {
        commerce_cart_order_product_line_item_delete($order, $check_item->line_item_id);
        break;
      }
    }
  }

}


/**
 * Implements hook_taxonomy_term_insert().
 */
function cod_sponsor_sales_taxonomy_term_insert($term) {
  $vocabulary = new SponsorshipLevelVocabulary();
  $vocabulary->addSponsorshipProduct($term);
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function cod_sponsor_sales_taxonomy_term_delete($term) {
  $vocabulary = new SponsorshipLevelVocabulary();
  $vocabulary->deleteSponsorshipProduct($term);
}

/**
 * Callback function for sponsor node form submission.
 *
 * When a sponsorship taxonomy level is selected adds
 * the associated sponsorship product to the Sponsor node.
 */
function sponsor_sales_add_sponsorship($form, &$form_state) {
  $form['#sponsorship_sales']->addSponsorshipValue($form_state);
}
